name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, Test_Branch ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        build-type: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libeigen3-dev \
          clang-format \
          pkg-config \
          libcanard-dev \
          valgrind \
          cppcheck
          
    - name: Create build directory
      run: mkdir build
      
    - name: Configure CMake
      run: |
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} ..
        
    - name: Build project
      run: |
        cd build
        make -j$(nproc)
        
    - name: Run static analysis
      run: |
        cppcheck --enable=all --inconclusive --std=c++17 \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          --suppress=noExplicitConstructor \
          FSW/ comms/ utl/ || true
          
    - name: Check code formatting
      run: |
        ./format.sh --check
        
    - name: Run tests (if available)
      run: |
        cd build
        if [ -f "engine_controller" ]; then
          # Add your test commands here when tests are implemented
          echo "Tests would run here"
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.build-type == 'Release'
      with:
        name: engine-controller-${{ matrix.build-type }}
        path: build/engine_controller
        
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install clang-format
      run: sudo apt-get update && sudo apt-get install -y clang-format
      
    - name: Check formatting
      run: |
        echo "Checking code formatting..."
        if ./format.sh --check; then
          echo "✅ All files are properly formatted"
        else
          echo "❌ Formatting issues found - run './format.sh' to fix"
          echo "This is a warning, not a failure - code will still build"
        fi
      
    - name: Check for TODO/FIXME comments
      run: |
        echo "Checking for TODO/FIXME/HACK comments..."
        if grep -r "TODO\|FIXME\|HACK" --include="*.cpp" --include="*.hpp" FSW/ comms/ utl/; then
          echo "Warning: Found TODO/FIXME/HACK comments in code - consider addressing before release"
        else
          echo "No TODO/FIXME/HACK comments found"
        fi
        
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Python and pip
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip
        
    - name: Install security tools
      run: |
        # Install semgrep via pip (more reliable than apt)
        pip3 install --user semgrep
        # Add to PATH
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Run security scan
      run: |
        # Scan for common security issues in C++ code
        if command -v semgrep &> /dev/null; then
          echo "Running semgrep security scan..."
          semgrep --config=auto --exclude="external/" --exclude="build/" . || echo "Semgrep found potential issues (non-fatal)"
        else
          echo "Semgrep not available, skipping security scan"
        fi
        
        # Basic security checks for C++ code
        echo "Running basic security checks..."
        
        # Check for hardcoded secrets/keys
        if grep -r -i "password\|secret\|key\|token" --include="*.cpp" --include="*.hpp" FSW/ comms/ utl/ | grep -v "// TODO\|// FIXME"; then
          echo "Warning: Potential hardcoded secrets found"
        fi
        
        # Check for dangerous functions
        if grep -r -E "strcpy|sprintf|gets|scanf" --include="*.cpp" --include="*.hpp" FSW/ comms/ utl/; then
          echo "Warning: Potentially unsafe C functions found"
        fi
